<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-13T09:57:47-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Harel Security Research</title><subtitle>Here you can read all about my research and techniques I&apos;ve gathered over time!</subtitle><entry><title type="html">Caching the Un-cacheables - Abusing URL Parser Confusions (Web Cache Poisoning Technique)</title><link href="http://localhost:4000/bugbounty/2022/09/02/Glassdoor-Cache-Poisoning.html" rel="alternate" type="text/html" title="Caching the Un-cacheables - Abusing URL Parser Confusions (Web Cache Poisoning Technique)" /><published>2022-09-02T02:11:39-04:00</published><updated>2022-09-02T02:11:39-04:00</updated><id>http://localhost:4000/bugbounty/2022/09/02/Glassdoor-Cache-Poisoning</id><content type="html" xml:base="http://localhost:4000/bugbounty/2022/09/02/Glassdoor-Cache-Poisoning.html">&lt;h4 id=&quot;here-is-how-i-was-able-to-poison-the-cache-of-thousands-of-pages-in-glassdoor-with-reflected--stored-xss&quot;&gt;Here is how I was able to poison the cache of thousands of pages in Glassdoor with reflected &amp;amp; stored XSS&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;img src=&quot;/images/thumbnail.png&quot; width=&quot;50%&quot; height=&quot;40%&quot; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Imagine you just picked up a new attractive bug bounty program your friend recommended, and you get excited to try it out because of all the good stories you’ve heard, but after a few days of intensive recon and research, you are left empty handed and end the day with no findings. The next day you start to doubt yourself, so you start looking for P4s and P5s, when all of the sudden, you find a header XSS. Seems pretty lame, until you remembered that your target has a caching server! You try to find a way to cache the XSS to store it, but keep getting stuck on MISS. Looks like they have web cache poisoning protection on this endpoint, making it un-cacheable, so you’re out of luck. Just when you thought you had a P2 or P1, reality HITS you like James Kettle’s web cache poisoning payloads. This seems like a dead end, so what do you do now? Have you maybe tried URL parsing confusions?&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;For any page under the path https://www.glassdoor.com/Job/?xss all URL parameters are reflected within a Javascript script tag. Lack  of sanitization means we can inject &amp;lt;/script into the page with https://www.glassdoor.com/Job/?xss=&amp;lt;/script, however due to the WAF we cannot simply escape the script tags and execute our own&lt;/li&gt;
  &lt;li&gt;The optimizelyEndUserId cookie value is reflected in the page, right after the URL parameters. By combining this with the issue from step 1. we can bypass the WAF by splitting the payload into two parts to execute arbitrary javascript. However this is a self XSS, because we cannot force our victim to send custom cookies.&lt;/li&gt;
  &lt;li&gt;We can get past this via cache poisoning. Sadly the pages under https://www.glassdoor.com/Job were not being cached, but all the pages under https://www.glassdoor.com/Award/ were.&lt;/li&gt;
  &lt;li&gt;After some testing I found that path traversal characters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/../&lt;/code&gt;, also known as dot segments, were being normalized by the caching frontend server but not being normalized by the backend web application (Dissagreement of &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc3986#section-5.2.4&quot;&gt;RFC 3986 5.2.4&lt;/a&gt;). This means for the path https://www.glassdoor.com/Job/../Award/blah?xss=&amp;lt;/script it would be seen as https://www.glassdoor.com/Award/blah?xss=&amp;lt;/script by the caching server and cached, but the contents for https://www.glassdoor.com/Job/../Award/blah would be returned by the webserver due to lack of normalization&lt;/li&gt;
  &lt;li&gt;As a result, by sending the request with our payload to https://www.glassdoor.com/Job/../Award/blah?xss=&amp;lt;/script (and rest of the payload in the cookie) we can succeed in obtaining our XSS. The webserver would interpret it as a page under https://www.glassdoor.com/Job/ and the return the contents with our injected XSS payload, while the caching server would see interpret it as https://www.glassdoor.com/Award/blah?xss=&amp;lt;/script causing the response to be cached&lt;/li&gt;
  &lt;li&gt;By then visiting https://www.glassdoor.com/Award/blah?xss=&amp;lt;/script our XSS will fire&lt;/li&gt;
  &lt;li&gt;Achieving a stored XSS was also possible using https://glassdoor.com/mz-survey/interview/collectQuestions_input.htm, which behaved very similarly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job&lt;/code&gt;, but the XSS was all in the headers and cookies, so sending a parameter in the URL was not necessary.&lt;/li&gt;
  &lt;li&gt;Sending https://www.glassdoor.com/mz-survey/interview/collectQuestions_input.htm/../../../Award/blah with the XSS in the headers and cookies will result in a stored xss under https://www.glassdoor.com/Award/blah&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stored XSS PoC&lt;/p&gt;

&lt;video width=&quot;100%&quot; height=&quot;100%&quot; controls=&quot;controls&quot; name=&quot;Glassdoor Web Cache Poisoning Stored XSS&quot;&gt;

&lt;source src=&quot;/videos/gd_wcp_stored.mov&quot; /&gt;
&lt;/video&gt;

&lt;h2 id=&quot;my-xss-methodology&quot;&gt;My XSS methodology&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;When testing for XSS, it’s important to consider all types of exploitations, and take note of everything that looks interesting.&lt;/li&gt;
  &lt;li&gt;Even if something might not be exploitable now, try to see the potential it will have in a chained exploit.&lt;/li&gt;
  &lt;li&gt;Many times, exploit chains are made up of unexploitable links that by themselves are useless, but when chained together can be fatal.&lt;/li&gt;
  &lt;li&gt;In Glassdoor, I found such endpoint in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/new-york-ny-compliance-officer-jobs-SRCH_IL.0,11_IC1132348_KO12,42069.htm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I found that the parameter name (and value too) were reflected in the response unsanitized&lt;/li&gt;
  &lt;li&gt;I was very suprised to see this, as this should have been caught very early on. The Glassdoor program has almost 800 submissions, so I didn’t make the mistake of thinking I was the only one who noticed it&lt;/li&gt;
  &lt;li&gt;The parameter was reflected in a string in a script tag, so to achieve an XSS, I had 2 options
    &lt;ol&gt;
      &lt;li&gt;Escape the string and inject javascript&lt;/li&gt;
      &lt;li&gt;Close the script tag and inject a generic XSS payload&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;For the first option, the strings seemed to have been escaped with a backslash, and unfortunately bypassing this is hard.&lt;/li&gt;
  &lt;li&gt;My second option, however, had much more potential as none of the user input was sanitized, so injecting a closing script tag should do the trick&lt;/li&gt;
  &lt;li&gt;However, the moment I put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&amp;lt;/script&amp;gt;&lt;/code&gt; (URL decoded here for readability) my request got immediately swatted down and blocked by the WAF. This was very much expected, however I eat WAFs for breakfast &amp;gt;:)&lt;/li&gt;
  &lt;li&gt;Before trying to play against the WAF, we have to understand the rules of the game.&lt;/li&gt;
  &lt;li&gt;A common mistake I see people make when trying to bypass WAFs, or just filters in general for the matter, is they copy and paste generic WAF bypass payloads without actually understanding &lt;i&gt;why&lt;/i&gt; the WAF is blocking their requests. Spraying and praying WAFs is usually a waste of time from my experience, so it’s best to test them manually, and most importantly understand them&lt;/li&gt;
  &lt;li&gt;So my first step when bypassing WAFs is to start out with a blocked payload and remove a character by character until the WAF lets me pass&lt;/li&gt;
  &lt;li&gt;Luckily, it didn’t take us long to achieve an agreement with the WAF. All I had to do was remove the greater than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; sign and I got a 200.&lt;/li&gt;
  &lt;li&gt;So now the question is what else doesn’t it like? It seemed like any character after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/script&lt;/code&gt; will get the attention of the WAF, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/scriptaaa&lt;/code&gt; for example&lt;/li&gt;
  &lt;li&gt;This would have been a big issue if the WAF truely blocked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/script*&lt;/code&gt;, but luckily the WAF did allow whitespace characters such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%20&lt;/code&gt; (space), which means that eventually, the script tag will close by the next upcoming greater than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; sign&lt;/li&gt;
  &lt;li&gt;So now, the next step turns to finding a new unsanitized injection point that will allow us to close the script and inject an HTML XSS payload&lt;/li&gt;
  &lt;li&gt;I tried to see if I can break down the payload into pieces with other parameters, however it was blocked too. Seemed like the WAF rule applied to the entire URL, not individual parameters. Luckly, I have bypassed these types of WAFs before&lt;/li&gt;
  &lt;li&gt;My first goto technique was an alphanumeric based HTTP parameter pollution, which I’ve already used in the past to bypass a similar WAF in this very program.&lt;/li&gt;
  &lt;li&gt;An alphanumeric parameter pollution abuses the alphanumeric ordering of the reflected queries, so it is possible to bypass a WAF like this by breaking down your payload backwards into different parameters&lt;/li&gt;
  &lt;li&gt;Unfortunately, it didn’t seem like the case here, but I will release a writeup on how I was able to use this technique to achieve reflected XSS&lt;/li&gt;
  &lt;li&gt;At this point I was losing a bit of hope in this endpoint, so I decided to look for a chain link vulnerability instead of a stand-alone vulnerability. This is when I started to take a look at the cookies&lt;/li&gt;
  &lt;li&gt;This is when I noticed that next to the injection point, there was actually a value that came from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;optimizelyEndUserId&lt;/code&gt; cookie in my request.&lt;/li&gt;
  &lt;li&gt;All I needed to do was to close the script tag and inject the HTML. Injecting  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;lt;svg&amp;gt;&lt;/code&gt; into the cookie seemed to do the trick.&lt;/li&gt;
  &lt;li&gt;Now I needed to actually execute javascript. We already got over the hard part, so now when we were able to smuggle in an svg tag past the WAF, so the rest should be easy&lt;/li&gt;
  &lt;li&gt;A pretty generic WAF bypass payload seemed to do the trick: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;lt;svg/onload=a=self[&apos;aler&apos;%2B&apos;t&apos;]%3Ba(document.domain)&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;And now we got an XSS that looks like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;york&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compliance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;officer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SRCH_IL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_IC1132348_KO12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42069&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VULN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glassdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optimizelyEndUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BRUH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aler&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;However it is a self XSS that only exists if we have control over the cookies&lt;/li&gt;
  &lt;li&gt;This could escalated to reflected XSS with cache poisoning however, so thats what I started to look for next (I know I said stored XSS in the description, I promise we will get there soon!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-caching-methodology-for-finding-relaxed-rules&quot;&gt;The caching methodology for finding relaxed rules&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;When doing my initial recon, I always like testing the cache to see how it behaves.&lt;/li&gt;
  &lt;li&gt;If I see a path that gets cached, I always try to test it’s limit. Many websites have unique rules to how they cache specific paths and files, so manually testing for these rules is a great way to get familiar with the cache server&lt;/li&gt;
  &lt;li&gt;When I first go about manually testing for these caching rules, I usually try to mess with the extensions first. I will remove, add, or change the extension and always carefully observe the caching headers and content of the response&lt;/li&gt;
  &lt;li&gt;After I mess around with the extension, I will test the path itself&lt;/li&gt;
  &lt;li&gt;For example, in Glassdoor I noticed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.glassdoor.com/Award/new-york-ny-compliance-officer-jobs-SRCH_IL.0,11_IC1132348_KO12,42069.htm&lt;/code&gt; was getting cached&lt;/li&gt;
  &lt;li&gt;I intercepted the request and sent it to the Burp repeater for further inspection&lt;/li&gt;
  &lt;li&gt;When I changed the extension, I noticed that while I get a 404 page, I still got MISS/HIT cache headers.&lt;/li&gt;
  &lt;li&gt;This immediately got me thinking that there is some sort of pattern for cache or no cache, instead of hardcoded files that get cached&lt;/li&gt;
  &lt;li&gt;Then I moved onto the path. I tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.glassdoor.com/Award/somerandomfile&lt;/code&gt;, and noticed it gave me the same 404 page with the same cache headers.&lt;/li&gt;
  &lt;li&gt;I was pretty confident by then I figured out what the rule was, but tested just in case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.glassdoor.com/randompath/somerandomfile&lt;/code&gt;, which gave me a 404 but didn’t cache&lt;/li&gt;
  &lt;li&gt;So now it was same to assume that the rule was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Award/*&lt;/code&gt;, meaning everything under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Award&lt;/code&gt; path was getting cached&lt;/li&gt;
  &lt;li&gt;For a while, I desperately tried to find some sort of header XSS to get Web Cache Poisoning, but unfortunately I ended up empty handed. However, this finding was still pretty great for me. While by itself it is not a vulnerability, it was a very relaxed rule and had a lot of potential to be chained with a vulnerability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chaining-the-exploit&quot;&gt;Chaining the exploit&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Web Cache Poisoning can be used for many things. The first ones that come to mind are
1) Stored XSS
2) Escalation of unexploitable XSS to Reflected XSS
3) DoS&lt;/li&gt;
  &lt;li&gt;At the time of my cache rule finding, I was already aware of the unexploitable XSS in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/new-york-ny-compliance-officer-jobs-SRCH_IL.0,11_IC1132348_KO12,42069.htm?VULN%3C/script%20&lt;/code&gt;, so trying to chain the two bugs into a reflected XSS vulnerability felt like the natrual thing to do&lt;/li&gt;
  &lt;li&gt;I went back to the Job path to do a bit more research. I wanted to see if there were any other endpoints that were vulnerable to the self XSS, and there were.&lt;/li&gt;
  &lt;li&gt;I found that every page under the Job path was vulnerable to self XSS, which was great! I took it a step further, and noticed that even pages that were &lt;i&gt;supposed&lt;/i&gt; to be 404s, actually returned 200 and were too vulnerable to the self XSS.&lt;/li&gt;
  &lt;li&gt;So to recap the important information:
    &lt;ol&gt;
      &lt;li&gt;The CDN has a rule that will cache &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Award/*&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;There is a self XSS vulnerability on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/*&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The attack surface of these two bugs were not “static”, but relied on a very relaxed wildcard pattern, which got me thinking: “Will these patterns &lt;i&gt;really&lt;/i&gt; accept anything? Will the server prioritize the pattern over special URL syntax, such as a dot segment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/../&lt;/code&gt;, or will it normalize the URL and &lt;i&gt;then&lt;/i&gt; match the pattern?”&lt;/li&gt;
  &lt;li&gt;Or in other words: “Will both the backend server and frontend server’s URL parsers normalize the dot segments?”&lt;/li&gt;
  &lt;li&gt;To test this, I tried these two payload with the assumption that the URL parser normalized the dot segments:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Award/../this_should_not_cache&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/../this_should_give_a_404&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;And to my suprise, they yielded conflicting results&lt;/li&gt;
  &lt;li&gt;The Award payload was NOT cached, meaning the frontend server’s URL parser does normalize the dot segment before matching with the cache rule&lt;/li&gt;
  &lt;li&gt;The Job path, however, returned a 200, which means that the web server did NOT normalize the dot segment.&lt;/li&gt;
  &lt;li&gt;So to conclude this short test, we can say that the frontend server and the backend server have a disagreement over how a dot segment should be parsed&lt;/li&gt;
  &lt;li&gt;Knowing this, we can construct the following payload:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Award&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RANDOMPATHTATDOESNOTEXIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachebuster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;046&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VULN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glassdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optimizelyEndUserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BRUH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;aler&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Ba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Since the webserver will NOT normalize the dot segment, we will get the response with the XSS&lt;/li&gt;
  &lt;li&gt;But, because the frontend WILL normalize the dot segment, it will be cached (and stored) under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Award/RANDOMPATHTATDOESNOTEXIST?cachebuster=046&amp;amp;attack=VULN%3C/script%20&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;So now, when the victim will visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://glassdoor.com/Award/RANDOMPATHTATDOESNOTEXIST?cachebuster=046&amp;amp;attack=VULN%3C/script%20&lt;/code&gt;, they will get the stored response with the XSS from the CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stored-xss&quot;&gt;Stored XSS&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;So once I was able to get a working PoC of my reflected XSS, I immediately reported.&lt;/li&gt;
  &lt;li&gt;However, I was still not satisfied enough, because I knew that a stored XSS should have been possible under the right conditions&lt;/li&gt;
  &lt;li&gt;so I kept on looking for an XSS that was truely all header based, and behaved similarly to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/*&lt;/code&gt;, where an XSS was possible under every page under it.&lt;/li&gt;
  &lt;li&gt;Thats when I remembered my first report to glassdoor, a reflected XSS in http://glassdoor.com/mz-survey/start_input.htm via an alphanumeric ordered parameter pollution (at the time it was still in triage, so it wasn’t fixed).&lt;/li&gt;
  &lt;li&gt;I thought that maybe I will be able to find a header XSS there too, so I kept on looking&lt;/li&gt;
  &lt;li&gt;Luckily for me, my reflected XSS from the report was also vulnerable to a full header XSS! But it did not behave like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/*&lt;/code&gt; where every page under it was vulnerable, so it was pretty much useless&lt;/li&gt;
  &lt;li&gt;I did remember that it was not only one endpoint which was vulnerable, there were quite a few others&lt;/li&gt;
  &lt;li&gt;Luckily, I was eventually able to find an endpoint that was both vulnerable to header XSS AND behaved like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Job/*&lt;/code&gt; after testing each of the vulnerable endpoints I previously reported and got to this one: https://glassdoor.com/mz-survey/interview/collectQuestions_input.htm/&lt;/li&gt;
  &lt;li&gt;The payload looked something like this&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;survey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collectQuestions_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Award&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RANDOMPATHTATDOESNOTEXIST123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cachebuster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;050&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;glassdoor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Forwarded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;For&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VULN&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Forwarded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;For&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VULN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`alert`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gdId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VULN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script%2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;0
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Agent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mozilla&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Linux&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;rv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gecko&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20100101&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Firefox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;78.0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;webp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*;q=0.8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The reason for splitting the XSS payload into 2 headers and a cookie is to bypass the WAF, as I was not able to put the entire payload into one cookie or header&lt;/li&gt;
  &lt;li&gt;The X-Forwarded-For header is reflected after the cookie, so my opprotunity to continue my payload lied there.&lt;/li&gt;
  &lt;li&gt;Unfortunately, the WAF was even stricter for the X-Forwarded-For header, as I was not able to use ANY special characters whatsoever&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Interestingly enough, there was another cool header confusion where the WAF only blocked the first X-Forwarded-For header, but the webserver interpreted both and reflected both. This allowed me to easily bypass the WAF by giving a valid value for the first X-Forwarded-For header but the rest of my XSS payload in the second X-Forwarded-For header. This can be seen in the above payload&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Due to the tricky nature of the bug, the triage process was a little more complicated than usual. Big thanks to &lt;a href=&quot;https://twitter.com/bxmbn&quot;&gt;@bxmbn&lt;/a&gt; (AKA &lt;a href=&quot;https://hackerone.com/bombon?type=user&quot;&gt;bombon&lt;/a&gt; on h1)) for giving me some help in the triage process&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;
  document
    .querySelector(&apos;.post-content&apos;) // your selector for the post body
    .querySelectorAll(&apos;h1,h2,h3,h4,h5,h6&apos;)
    .forEach(function(heading) {
      if (heading.id) {
        heading.innerHTML =
          &apos;&lt;a style=&quot;color:black;&quot; href=&quot;#&apos; + heading.id + &apos;&quot;&gt;&apos; + heading.innerText + &apos;&lt;\/a&gt;&apos;;
      }
    });
&lt;/script&gt;</content><author><name></name></author><category term="BugBounty" /><summary type="html">Here is how I was able to poison the cache of thousands of pages in Glassdoor with reflected &amp;amp; stored XSS Introduction</summary></entry></feed>